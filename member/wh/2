
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <errno.h>
#include <netinet/in.h>

#define PORT		5678
//请求数据类型结构体
typedef struct data{
	char name[20];
	char passwd[20];
	int fd;
}request_data;


//请求类型结构体
typedef struct reque{
	int type;								//请求类型
	char send_user[20];						//请求方
	char recv_user[20];						//被请求方
	request_data  data;						//请求数据
	time_t time;							//请求时间
	int flag;								//是否被处理
}request;

//反馈数据类型结构体
typedef struct dat{
	int cnt;
}back_data;

back_data buf;
int count;
pthread_mutex_t mutex;

//创建接受服务器反馈结果的线程
void *fback(void *arg);
{
	while(1) {
		pthread_mutex_lock(&mutex);
		count = 0;
		recv((int *)arg,buf,sizeof(buf),0);
		count = 1;
		pthread_mutex_unlock(&mutex);
	}
}


int main(int argc,char *argv[])
{
	struct sockaddr_in serv_addr;
	int conn_fd,sock_fd;
	request buf;
	sock_fd = socket(AF_INET,SOCK_STREAM,0);
	if(sock_fd < 0) {
		perror("socket:"):
		exit(1);
	}


	//初始化服务器端口与地址
	memset(&serv_addr,0,sizeof(struct sockaddr_in));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);	//服务器端口
	inet_pton(AF_INET,argv[1],&serv_addr.sin_addr);	

	//连接服务器
	conn_fd = connect(sock_fd,(struct sockaddr *)&serv_addr,sizeof(struct sockaddr));
	int thid;
	pthread_mutex_init(&mutex,NULL);				//初始化锁
	pthread_create(&thid,NULL,fback,(void *)&conn_fd);
	
	//选择功能
	printf("1.登录\n2.注册\n");
	char chose;
	scanf("%c",&chose);
	switch(chose) {
		case '1':
			buf.type = 0100;
			puts("请输入用户名:");
			scanf("%s",buf.data.name);
			printf("\n请输入密码:");
			scanf("%s",buf.data.passwd);
			buf.flag = 0;
			send(conn_fd,buf,sizeof(buf),0);
			pthread_mutex_lock(&mutex);
			while(1) {
				if(count == 1) {
					puts("登陆成功!");
					break;
				}
			}
			pthread_mutex_unlock(&mutex);
			break;
		default:
			break;
	}
	return 0;
}




