第一部分：
1----：D
2----：[50000,100000]
第二部分：
1----：
#include<stdio.h>
#include<pthread.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
pthread_mutex_t mutex;
void *thread_a(void *arg)
{
    pthread_mutex_lock(&mutex);
    printf("a");
    pthread_mutex_unlock(&mutex);
}
void *thread_b(void *arg)
{
    pthread_mutex_lock(&mutex);
    printf("b");
    pthread_mutex_unlock(&mutex);
}
void *thread_c(void *arg)
{
    pthread_mutex_lock(&mutex);
    printf("c");
    pthread_mutex_unlock(&mutex);
}
int main(void)
{
    pthread_t thid1,thid2,thid3;
    int i;
    while(1)
    {
        pthread_mutex_init(&mutex,NULL);
        pthread_create(&thid1,NULL,(void *)thread_a,NULL);
        pthread_create(&thid2,NULL,(void *)thread_b,NULL);
        pthread_create(&thid3,NULL,(void *)thread_c,NULL);
        pthread_join(thid1,NULL);
        pthread_join(thid2,NULL);
        pthread_join(thid3,NULL);
    }
    pthread_mutex_destroy(&mutex);
}
2------：




第三部分;
1----：我认为相同
2----：应该是等于
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<ctype.h>
#include<pthread.h>
#define MAX_THREAD 3 //线程个数
unsigned long long main_counter, counter[MAX_THREAD];
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
void* thread_worker(void* arg);
int main()
{
    int i, rtn, ch;
    int tmp[MAX_THREAD];
    pthread_t pthread_id[MAX_THREAD] = { 0 }; // 存放线程id
    for (i = 0; i < MAX_THREAD; i++)
    {/* 在这里填写代码,创建一个普通的线程, 线程id存入pthread_id[i],线程执行函数为thread_worker(), 并将i作为参数传给线程*/
     pthread_create(pthread_id[i],NULL,(void *)thread_worker,i);
    }
    do //用户按一次回车执行下面的循环体一次,按q退出
    {
        unsigned long long sum = 0;//求所有线程的 counter 的和
        for (i = 0; i < MAX_THREAD; i++)
        {
            sum += counter[i];
            printf("%llu ", counter[i]);
        }
        printf("%llu/%llu", main_counter, sum);
    } while ((ch = getchar()) != 'q');
    return 0;
}
void* thread_worker(void* arg)
{
    int thread_num;// 在这里填写代码, 把 main 中的i值传递给thread_num
    thread_num=*(int *)arg;
    for (; ;)
    {
        counter[thread_num]++;
        main_counter++;
    }
}
