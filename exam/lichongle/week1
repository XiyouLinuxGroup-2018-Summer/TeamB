/*********************第一题原始代码*********************/
typedef struct tag_unimportant {
    char *name;
    int num;
} A;
void func(A *a)
{
    a = (A *)malloc(sizeof(A));
    strcpy(a->name, "Xiyou Linux Group");
    a->num = 20180728;
}
int main(int argc, char *argv[])
{
    A *a;
    func(a);
    printf("%s %d\n", a->name, a->num);
    return 0;
}
改后：第一种
typedef struct tag_unimportant {
    char *name;
    int num;
} A;
void func(A *a)
{
    //a = (A *)malloc(sizeof(A));
    strcpy(a->name, "Xiyou Linux Group");
    a->num = 20180728;
}
int main(int argc, char *argv[])
{
    A *a;
    a = (A *)malloc(sizeof(A));
    func(a);
    printf("%s %d\n", a->name, a->num);
    return 0;
}
第二种：
typedef struct tag_unimportant {
    char *name;
    int num;
} A;
void func(A *a)
{
    a = (A *)malloc(sizeof(A));
    strcpy(a->name, "Xiyou Linux Group");
    a->num = 20180728;
    printf("%s %d\n", a->name, a->num);
}
int main(int argc, char *argv[])
{
    A *a;
    func(a);
    //printf("%s %d\n", a->name, a->num);
    return 0;
}
因为相当于你给了a班的lala五块钱，你问b班的lala要你给a班lala的钱
 第二题：
#include<stdio.h>
#include<string.h>
int convert(char ptr[])
{
    int num=0,i;
    for(i=0;i<strlen(ptr);i++)
    {
        num=(num+(ptr[i]-'0'))*10;
    }
    num/=10;
    return num;
}
int main(void)
{
    int m;
    char ptr[100];
    gets(ptr);
    m=convert(ptr);
    printf("%d\n",m);
}
 /*********************第三题原始代码*********************/
struct strange {
    char a, b, c, d, e, zero;
};
 int main(int argc, char *argv[])
{
    struct strange xp[3];
    int characters[6] = "abcde";
    for (int i = 0; i < 6; i++) {
        *((char *)(xp + 0) + i) = characters[i];//将characters  copy到xp[0]中，xp+0  就相当于xp[0]  xp+1就相当于xp[1]
    }
     strcpy((char *)&xp[1], (char *)characters);//强制转换为char * 一个字节
    memcpy(&xp[2], characters, sizeof(struct strange));将characters中的sizeof(struct strange)个字节copy到xp[2]中去
    printf("%zu\n", strlen((char *)characters));
     for (int i = 0; i < 3; i++) {
        printf("%c\n", xp[i].e);
    }
}
 代码
//终端输入是 gcc teat.c  
//           ./a.out /lib
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<sys/stat.h>
#include<unistd.h>
#include<sys/types.h>
#include<limits.h>
#include<dirent.h>
#include<grp.h>
#include<pwd.h>
#include<errno.h>
#include<fcntl.h>
typedef struct file 
{
    int fid;//文件编号
    char filename[128];
    int modes;//整形存0755 存为493
    int size;//大小
    char data[256];//文件内容
    struct file *next;
}myfile;
void out();
myfile *get_file();
void my_err();
myfile *get_file(char *path)
{
    int i,t;
    int num=0;//使用冒泡排序就要看有多少个，然后循环要用
    myfile *phead,*pnew,*p,*pn;//定义链表
    //链表初始化
    phead=(myfile *)malloc(sizeof(myfile));
    phead->next=NULL;
    DIR *dir;//目录打开返回的目录标识符
    struct dirent *dir_e;//打开目录后p=phead->next;
    //打开目录，错误返回出错信息
    if((dir=opendir(path))==NULL)
        my_err("opendir",__LINE__);
    //读取目录中的文件名，然后存储到列表中去
    while((dir_e=readdir(dir))!=NULL)
    {
        pnew=(myfile *)malloc(sizeof(myfile));
        strcpy(pnew->filename,dir_e->d_name);
        pnew->next=phead->next;
        phead->next=pnew;
        num+=1;
    }
    t=num;
    //冒泡排序
    while(num--)
    {
        p=phead;
        pnew=phead->next;
        pn=pnew->next;
        while(pn!=NULL)
        {
            if(strcasecmp(pnew->filename,pn->filename)>0)
            {
                pnew->next=pn->next;
                p->next=pn;
                pn->next=pnew;
                p=pn;
                pn=pnew->next;
            }
            else
            {
                p=pnew;
                pnew=pn;
                pn=pn->next;
            }
        }
    }
    p=phead->next;
    while(p!=NULL)
    {
        p->fid=i;
        i++;
        p=p->next;
    }
    return phead;
}
void out(myfile *phead)
{
    int i=0;
    int mode_u=0;
    int mode_g=0;
    int mode_o=0;
    int mode;
    DIR *dir;
    struct passwd *user;
    struct group *grop;
    struct stat buf;
    myfile *p;
    p=phead->next;
    if(chdir("/lib")<0)
        my_err("chdir",__LINE__);
    while(p!=NULL)
    {
        mode_u=0;
        mode_g=0;
        mode_o=0;
        if((dir=opendir(p->filename))==NULL)
        {
            if(stat(p->filename,&buf)==-1)
                my_err("stat",__LINE__);
            else
            {
                printf("%d  ",i++);
                printf("%s   ",p->filename);
                printf("%ld   ",buf.st_size);
                /*获取并打印文件所有者的权限*/
                if(buf.st_mode&S_IRUSR)
                    mode_u+=4;
                if(buf.st_mode&S_IWUSR)
                    mode_u+=2;
                if(buf.st_mode&S_IXUSR)
                    mode_u+=1;
                /*获取并打印组权限*/
                if(buf.st_mode&S_IRGRP)
                    mode_g+=4;
                if(buf.st_mode&S_IWGRP)
                    mode_g+=2;
                if(buf.st_mode&S_IXGRP)
                    mode_g+=1;
                /*获取并打印其他人的权限*/
                if(buf.st_mode&S_IROTH)
                    mode_o+=4;
                if(buf.st_mode&S_IWOTH)
                    mode_o+=2;
                if(buf.st_mode&S_IXOTH)
                    mode_o+=1;
                mode=mode_u*100+mode_g*10+mode_o;
                printf("%-4d\n",mode);
                printf("\n");
            }
        }
        p=p->next;
    }
}
void my_err(const char *err_string,int err_line)
{
    fprintf(stderr,"line:%d ",err_line);
    perror(err_string);
    exit(1);
}
int main(int argc,char **argv)
{
    myfile *phead;
    if(strcmp(argv[1],"/lib")==0)
    {
        phead=get_file("/lib");
        out(phead);
    }
}
